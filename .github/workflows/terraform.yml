name: "Terraform"

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0: (Optional, specify if needed)
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        id: init
        working-directory: eks  # Change working directory
        run: |
          export TF_LOG=DEBUG
          terraform init

      - name: Terraform Format
        id: fmt
        working-directory: eks  # Change working directory
        run: |
          export TF_LOG=DEBUG
          terraform fmt -check

      - name: Terraform Validate
        id: validate
        working-directory: eks  # Change working directory
        run: |
          export TF_LOG=DEBUG
          terraform validate -no-color

      - name: Terraform Plan
        id: plan
        working-directory: eks  # Change working directory
        if: github.event_name == 'pull_request'
        run: |
          export TF_LOG=DEBUG
          terraform plan -no-color -input=false
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: ${{ steps.plan.outputs.stdout }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style \`${{ steps.fmt.outcome }}\`
                          #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
                          #### Terraform Validation \`${{ steps.validate.outcome }}\`
                          #### Terraform Plan \`${{ steps.plan.outcome }}\`

                          <details><summary>Show Plan</summary>

                          \`\`\`terraform\n
                          ${process.env.PLAN}
                          \`\`\`

                          </details>

                          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply (Main Branch Push)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        working-directory: eks  # Change working directory
        run: terraform apply -auto-approve -input=false

      - name: Terraform Apply (Pull Request Merge)
        if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
        working-directory: eks  # Change working directory
        run: terraform apply -auto-approve -input=false
